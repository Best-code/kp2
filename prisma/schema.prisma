generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id   Int    @id @default(autoincrement())
  name String @unique
  def String
  image String
  unit Unit[]
}

model Unit {
  id       Int       @id @default(autoincrement())
  classId  Int?
  name     String
  class    Class?    @relation(fields: [classId], references: [id])
  handouts Handout[]
  videos   Video[]
}

model Video {
  id     Int    @id @default(autoincrement())
  unitId Int?
  name   String
  link   String
  unit   Unit?  @relation(fields: [unitId], references: [id])
}

model Handout {
  id     Int    @id @default(autoincrement())
  unitId Int?
  name   String
  unit   Unit?  @relation(fields: [unitId], references: [id])
  contentId String?
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  role Role @default(USER)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}